<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="retail.sql" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="7169"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="retail.sqlite" custom_title="0" dock_id="1" table="4,13:mainretail.sqlite"/><table title="orders" custom_title="0" dock_id="2" table="4,6:mainorders"/><dock_state state="000000ff00000000fd00000001000000020000043c000002b6fc0100000001fc000000000000043c0000012d00fffffffa000000010100000002fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000011800fffffffb000000160064006f0063006b00420072006f00770073006500320100000000ffffffff0000012d00ffffff000002580000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="orders" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="50"/><column index="2" value="117"/><column index="3" value="85"/><column index="4" value="85"/><column index="5" value="117"/><column index="6" value="78"/><column index="7" value="163"/><column index="8" value="93"/><column index="9" value="109"/><column index="10" value="132"/><column index="11" value="117"/><column index="12" value="73"/><column index="13" value="62"/><column index="14" value="124"/><column index="15" value="124"/><column index="16" value="93"/><column index="17" value="300"/><column index="18" value="78"/><column index="19" value="56"/><column index="20" value="57"/><column index="21" value="85"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="retail.sqlite" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="42"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">SELECT name From sqlite_master WHERE type='table';
SELECT * FROM orders orders LIMIT 5;
PRAGMA table_info('orders');
SELECT [Order Date] FROM orders LIMIT 20;

DROP VIEW IF EXISTS normalized_orders;

CREATE VIEW normalized_orders AS
SELECT
  [Row ID]               AS row_id,
  [Order ID]             AS order_id,
  [Order Date]           AS order_date_raw,
  date(substr([Order Date],7,4) || '-' || substr([Order Date],1,2) || '-' || substr([Order Date],4,2)) AS order_date,
  date(substr([Ship Date],7,4)  || '-' || substr([Ship Date],1,2)  || '-' || substr([Ship Date],4,2))  AS ship_date,
  Category               AS category,
  [Sub-Category]         AS sub_category,
  [Product Name]         AS product_name,
  Region                 AS region,
  CAST(Sales   AS REAL)  AS sales,
  CAST(Profit  AS REAL)  AS profit,
  CAST(Quantity AS INT)  AS quantity,
  CAST(Discount AS REAL) AS discount
FROM orders;

DROP VIEW IF EXISTS normalized_orders;

CREATE VIEW normalized_orders AS
SELECT
  [Row ID]               AS row_id,
  [Order ID]             AS order_id,
  [Order Date]           AS order_date_raw,
  [Ship Date]            AS ship_date_raw,

  
  date(
    printf('%04d-%02d-%02d',
      CAST(
        substr(
          substr([Order Date], instr([Order Date], '/') + 1),
          instr(substr([Order Date], instr([Order Date], '/') + 1), '/') + 1
        ) AS INTEGER
      ), -- year
      CAST(substr([Order Date], 1, instr([Order Date], '/') - 1) AS INTEGER), -- month
      CAST(
        substr(
          substr([Order Date], instr([Order Date], '/') + 1),
          1,
          instr(substr([Order Date], instr([Order Date], '/') + 1), '/') - 1
        ) AS INTEGER
      ) 
    )
  ) AS order_date,

  date(
    printf('%04d-%02d-%02d',
      CAST(
        substr(
          substr([Ship Date], instr([Ship Date], '/') + 1),
          instr(substr([Ship Date], instr([Ship Date], '/') + 1), '/') + 1
        ) AS INTEGER
      ),
      CAST(substr([Ship Date], 1, instr([Ship Date], '/') - 1) AS INTEGER),
      CAST(
        substr(
          substr([Ship Date], instr([Ship Date], '/') + 1),
          1,
          instr(substr([Ship Date], instr([Ship Date], '/') + 1), '/') - 1
        ) AS INTEGER
      )
    )
  ) AS ship_date,

  Category               AS category,
  [Sub-Category]         AS sub_category,
  [Product Name]         AS product_name,
  Region                 AS region,
  CAST(Sales   AS REAL)  AS sales,
  CAST(Profit  AS REAL)  AS profit,
  CAST(Quantity AS INT)  AS quantity,
  CAST(Discount AS REAL) AS discount
FROM orders;

SELECT
  category,
  ROUND(SUM(profit) * 100.0 / NULLIF(SUM(sales),0), 2) AS profit_margin_pct,
  SUM(sales)  AS total_sales,
  SUM(profit) AS total_profit
FROM normalized_orders
GROUP BY category
ORDER BY profit_margin_pct ASC;

SELECT
  category,
  sub_category,
  SUM(sales)  AS total_sales,
  SUM(profit) AS total_profit,
  ROUND(SUM(profit) / NULLIF(SUM(sales),0), 4) AS profit_margin
FROM normalized_orders
GROUP BY category, sub_category
ORDER BY profit_margin ASC
LIMIT 30;

SELECT
  product_name,
  SUM(sales)  AS total_sales,
  SUM(profit) AS total_profit
FROM normalized_orders
GROUP BY product_name
ORDER BY total_profit ASC
LIMIT 20;

SELECT
  region,
  SUM(sales)  AS total_sales,
  SUM(profit) AS total_profit,
  ROUND(SUM(profit) * 100.0 / NULLIF(SUM(sales),0), 2) AS profit_margin_pct
FROM normalized_orders
GROUP BY region
ORDER BY profit_margin_pct ASC;

SELECT
  strftime('%Y-%m', order_date) AS year_month,
  SUM(sales)  AS total_sales,
  SUM(profit) AS total_profit
FROM normalized_orders
GROUP BY year_month
ORDER BY year_month;

CREATE TABLE IF NOT EXISTS InventoryMaster (
  sub_category TEXT PRIMARY KEY,
  avg_inventory_days INTEGER
);

INSERT OR REPLACE INTO InventoryMaster (sub_category, avg_inventory_days) VALUES
('Chairs',65),('Tables',70),('Bookcases',60),('Phones',25),('Accessories',20),
('Binders',35),('Paper',25),('Storage',40),('Appliances',45),('Copiers',30),
('Machines',50),('Furnishings',55),('Art',30),('Envelopes',28),('Fasteners',30),
('Labels',25),('Supplies',40);

SELECT
  n.category,
  n.sub_category,
  SUM(n.sales)  AS total_sales,
  SUM(n.profit) AS total_profit,
  ROUND(SUM(n.profit) / NULLIF(SUM(n.sales),0), 4) AS profit_margin,
  i.avg_inventory_days
FROM normalized_orders n
LEFT JOIN InventoryMaster i
  ON n.sub_category = i.sub_category
GROUP BY n.category, n.sub_category
ORDER BY profit_margin ASC;</sql><current_tab id="0"/></tab_sql></sqlb_project>
